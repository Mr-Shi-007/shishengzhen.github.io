<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Test002</title>
    <url>/2020/04/11/Test002/</url>
    <content><![CDATA[<hr>
<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><blockquote>
<p>引用1<br>众所周知，Java语言是编程语言的老前辈，<strong>经久</strong><strong>不衰</strong>。</p>
</blockquote>
<a id="more"></a>
<p><em>对于新手</em><em>也是极其友好的</em><br>每个程序员都有一个架构师的梦想</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs danhangdaima```"><br>插入代码<br>&#96;&#96;&#96;javascript<br>int a&#x3D;1;<br>sout<br></code></pre></td></tr></table></figure>
<!-- 这是注释 -->
<p> 2020-04-21 2020-04-21 11:22:45</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><ol>
<li>第一节</li>
<li>第二节</li>
<li>第三节</li>
<li>第四节</li>
<li>第五节</li>
</ol>
<ul>
<li>这是无序列表一级</li>
</ul>
<ul>
<li>这是无序列表二级</li>
<li>这是无序列表二级</li>
<li>这是无序列表二级</li>
</ul>
<ul>
<li>这是无序列表三级</li>
</ul>
<hr>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>合并1<br>合并123456789234245<br>合并3<br>内容<br>[ ] 未完成任务<br>-[x] 已完成任务<br>互换位置1  互换位置2</p>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><ul>
<li>内容2<br>  a 子列表1<br>  b 子列表2</li>
</ul>
<ul>
<li>内容1</li>
<li>内容2</li>
</ul>
<ol>
<li><ul>
<li>内容3</li>
</ul>
</li>
<li><ul>
<li>内容4</li>
</ul>
</li>
<li><ul>
<li>内容5</li>
</ul>
</li>
<li><ul>
<li>内容6</li>
</ul>
</li>
</ol>
<hr>
<p>表格</p>
<p>|1*1            |1.2 asjlfjsjdlfksaj    |1.3safasefgagsag    |<br>|-2.1 sadfasff-    |–                        |–    22                |<br>|                |                        |                    |<br>|                |                        |                    |</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="shishengzhen.github.io">我的个人博客</a><br><img src="file:///C:/Users/Shi/Pictures/ico/a1.ico" alt="图片测试"></p>
]]></content>
  </entry>
  <entry>
    <title>Java Interview</title>
    <url>/2020/04/25/Java%20interview/</url>
    <content><![CDATA[<blockquote class="blockquote-center">Interview,Go Go Go!</blockquote>
<a id="more"></a>

<h3 id="一：简单介绍Java跨平台原理"><a href="#一：简单介绍Java跨平台原理" class="headerlink" title="一：简单介绍Java跨平台原理"></a>一：简单介绍Java跨平台原理</h3><p>Java通过不同平台、不同操作、不同位数的虚拟机(JVM)来屏蔽他们之间的指令差异；而对外实现统一的接口（API），对于我们普通开发人员来说，只需要下载不同版本的Java JVM即可。</p>
<h3 id="二：开发环境的步骤"><a href="#二：开发环境的步骤" class="headerlink" title="二：开发环境的步骤"></a>二：开发环境的步骤</h3><ul>
<li>jdk</li>
<li>IDEA</li>
<li>Tomcat</li>
</ul>
<h3 id="三：基本数据类型-各自占多少字节，多少位。"><a href="#三：基本数据类型-各自占多少字节，多少位。" class="headerlink" title="三：基本数据类型,各自占多少字节，多少位。"></a>三：基本数据类型,各自占多少字节，多少位。</h3><table>
<thead>
<tr>
<th>类别</th>
<th>字节</th>
<th>位数</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1</td>
<td>8</td>
</tr>
<tr>
<td>short</td>
<td>2</td>
<td>16</td>
</tr>
<tr>
<td>int</td>
<td>4</td>
<td>32</td>
</tr>
<tr>
<td>long</td>
<td>8</td>
<td>64</td>
</tr>
<tr>
<td>booleab</td>
<td>1</td>
<td>8</td>
</tr>
<tr>
<td>char</td>
<td>2</td>
<td>16</td>
</tr>
<tr>
<td>float</td>
<td>4</td>
<td>32</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
<td>64</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>范围如下</strong><br><img src="http://q958h9bw7.bkt.clouddn.com/20190714224935794.jpg" alt=""></p>
</blockquote>
<h3 id="四：Java特性"><a href="#四：Java特性" class="headerlink" title="四：Java特性"></a>四：Java特性</h3><ol>
<li><p>封装<br> 把对象封装成一个<strong>高度自治</strong>和<strong>相对封闭</strong>的个体。<br> 如：张三这个人，他的姓名，性别等属性，可以设置不同的方法让他对不同人的可读性不同。</p>
</li>
<li><p>继承<br> 在定义一个类的时候，可以在一个已经存在的类的基础上进行，并且可以在此基础上加入新的内容，以满足特定的需求<br> 比如儿子继承父亲的财产，并且可以自己在进行投资等别的行为。</p>
</li>
<li><p>多态<br> 不同类的对象对同一消息的发出做出不同反应。即同一消息可以根据发送对象的不同而采取不同的行为方式，发送消息即函数调用。<br> 多态的作用即消除不同类的耦合关系，</p>
<p> 多态包括两种形式: </p>
</li>
</ol>
<ul>
<li>重载</li>
<li>覆盖</li>
</ul>
<h3 id="五：为什么需要包装类型"><a href="#五：为什么需要包装类型" class="headerlink" title="五：为什么需要包装类型"></a>五：为什么需要包装类型</h3><p>int–Integer<br>因为Java是一个面型对象的语言，而基本数据类型不具备面向对象的特性。<br>如：Integer null max min 缓存值<br>如果用integer可以表示person null。而int不好表示。</p>
<h3 id="六：-与-equals-的区别"><a href="#六：-与-equals-的区别" class="headerlink" title="六：== 与 equals 的区别"></a>六：== 与 equals 的区别</h3><p>== ：<br>    * 基本数据类型:直接进行值得比较<br>    * 引用数据类型：对应引用的内存的首地址<br>equals：<br>    本质实际上就是==，默认情况下是进行引用比较的，不过是String和Integer等都重写了equals方法，进行的是值比较</p>
<h3 id="七：String-StringBuffer-StringBuilder"><a href="#七：String-StringBuffer-StringBuilder" class="headerlink" title="七：String StringBuffer StringBuilder"></a>七：String StringBuffer StringBuilder</h3><p>String:     底层是由final修饰，字符串常量，一经创建<strong>不可再被修改</strong>;同时重写了equals&amp;hashcode<br>StringBuilder: 字符串可变变量，执行效率高，但是不安全<br>StringBuffer: 字符串可变变量，可以对字符串进行操作，Append方法，动态构造字符；执行效率低但是安全。</p>
<h3 id="八：集合"><a href="#八：集合" class="headerlink" title="八：集合"></a>八：集合</h3><p>存储值的：</p>
<ul>
<li>list：有序，值可以重复</li>
<li>set:无序，值不可重复；如果需要用set，需要注意重写equals&amp;hashcode方法</li>
</ul>
<p>存储key-value的：</p>
<ul>
<li>HashMap</li>
<li>HashTable</li>
<li>TreeMap</li>
</ul>
<p>HashMap和HashTable的异同：</p>
<ul>
<li>相同：都是存储key-value数据</li>
<li>不同：HashMap可以把Null当做key或者value，但是HashTable不行；HashMap效率高，但是线程不安全；HashTable效率反之；解决办法：ConCurrentHashMap，把Map分成n个Segment，类似HashMap，可以提供线程安全，效率提高默认16倍</li>
</ul>
<p>而list又分为两种：ArrayList &amp; LinkedList</p>
<ul>
<li>ArrayList 底层基于数组，查询快，但是进行插入删除等效率低下</li>
<li>LinkedList 底层基于链表，查询慢，但是插入删除等效率高</li>
</ul>
<p>set分为：</p>
<ul>
<li>HashSet</li>
<li>LinkedHashSet</li>
<li>TreeSet</li>
</ul>
<h3 id="九：线程"><a href="#九：线程" class="headerlink" title="九：线程"></a>九：线程</h3><p>一：实现方式：</p>
<ul>
<li>通过继承Thread类实现一个线程</li>
<li>通过实现Runnable接口实现一个线程</li>
</ul>
<p>区别：1,继承扩展性不强，2,Java只支持单继承，</p>
<p>二：启动方法<br>    new–&gt;start方法<br>三：区别<br>    thread.SetName;</p>
<h3 id="十：servlet"><a href="#十：servlet" class="headerlink" title="十：servlet"></a>十：servlet</h3><p>servlet 全程Server Applet，是Java编写的服务器端程序，这些Servlet都要实现Servlet这个接口。主要功能：交互的浏览和修改数据，生成动态web功能。</p>
<blockquote>
<p>生命周期：加载Serverlet的class—&gt;&gt;实例化Servlet—-&gt;&gt;初始化Servlet，调用init方法—&gt;&gt;处理请求，Servlet的service方法—&gt;&gt;服务关闭，desdroy方法。</p>
</blockquote>
<h3 id="十一：MVC"><a href="#十一：MVC" class="headerlink" title="十一：MVC"></a>十一：MVC</h3><p>M:(Model) 模型  javabean<br>V(View) 视图 Html jsp<br>C(Control) 控制器 Servlet Action</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Test003</title>
    <url>/2020/04/11/Test003/</url>
    <content><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
<blockquote class="blockquote-center">Next有趣的小功能</blockquote>
<a id="more"></a>
<!-- 标签 方式，要求版本在0.4.5或以上 -->
<blockquote class="blockquote-center"><p>第二种方式</p>
</blockquote>

<!-- 标签别名 -->
<blockquote class="blockquote-center"><p>第三种方式 </p>
</blockquote>

<div class="note default"><p>临 </p></div>
<div class="note primary"><p>兵 </p></div>
<div class="note success"><p>斗 </p></div>
<div class="note info"><p>者 </p></div>
<div class="note warning"><p>一 </p></div>
<div class="note danger"><p>二 </p></div>
<div class="note danger"><p>三 </p></div>

<p>primary<br>success<br>info<br>warning<br>danger</p>
]]></content>
  </entry>
  <entry>
    <title>Test004</title>
    <url>/2020/04/25/Test004/</url>
    <content><![CDATA[<blockquote class="blockquote-center">透切理解面向对象三大基本特性是理解面向对象五大基本原则的基础</blockquote>
<a id="more"></a>
三大特性是：封装,继承,多态

<ul>
<li><p>封装：<br>也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。封装是面向对象的特征之一，是对象和类概念的主要特性。 简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。</p>
</li>
<li><p>继承：<br>是指可以让某个类型的对象获得另一个类型的对象的属性的方法。它支持按级分类的概念。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用基类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；</p>
</li>
<li><p>多态：<br>就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Test001</title>
    <url>/2020/04/20/Test001/</url>
    <content><![CDATA[<blockquote class="blockquote-center">C语言是撑起一切的基石</br></br><b>Java之父</b></blockquote>
<a id="more"></a>

<ul>
<li><p>Java 简介<br><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度一下</a><br>Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同研发，并在1995年正式推出。</p>
</li>
<li><p>Java分为三个体系</p>
</li>
</ul>
<div class="note primary"><p> JavaSE（J2SE) (Java2 Platform Standard Edition，java平台标准版）<br>JavaEE(J2EE) (Java 2 Platform,Enterprise Edition，java平台企业版)<br>JavaME(J2ME) (Java 2 Platform Micro Edition，java平台微型版)。</p></div>
<blockquote>
<p><strong>2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字”2”；J2EE更名为Java EE， J2SE更名为Java SE，J2ME更名为Java ME。</strong></p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> i=<span class="hljs-number">10</span>;<br><span class="hljs-built_in">int</span> j=<span class="hljs-number">8</span>;<br>System.<span class="hljs-keyword">out</span>.println(i+j);<br></code></pre></td></tr></table></figure>

<p>这是一个测试。</p>
<hr>
<h4 id="如何修改文章底部标签前的符号"><a href="#如何修改文章底部标签前的符号" class="headerlink" title="如何修改文章底部标签前的符号"></a>如何修改文章底部标签前的符号</h4><p>打开 C:\blog\themes\next\layout\ _macro，修改 post.swig 中第359行代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;&#123; url_for(tag.path) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span> </span></span><br><span class="xml">rel="tag"&gt;<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa  fa-google"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> </span><br><span class="hljs-template-variable">&#123;&#123; tag.name &#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
<p>将“<i class="fa  fa-google"></i>”替换即可，网站图标可参考<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a></p>
<h4 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h4><p>登录 <strong>Leancloud.cn</strong>,注册并创建一个应用，然后应用keys下的Appid 和Appkeys复制。<br>进入 C:\blog\themes\next 下的_config.yml配置文件，第388行代码，对应复制到appid和appkey中。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">appid:</span>  <span class="hljs-string">tg6VxNS1Wr4lb4Pv23VtJHdT-gzGzoHsz</span><br>  <span class="hljs-attr">appkey:</span>  <span class="hljs-string">1LT5yIo3Uvm9Ejld2M5JNCsT</span><br>  <span class="hljs-attr">notify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># mail notifier , https://github.com/xCss/Valine/wiki</span><br>  <span class="hljs-attr">verify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Verification code</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">不搞一下么？</span> <span class="hljs-comment"># comment box placeholder</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">wavatar</span> <span class="hljs-comment"># gravatar style</span><br>  <span class="hljs-comment"># avatar: /uploads/avatar.png</span><br>  <span class="hljs-attr">guest_info:</span> <span class="hljs-string">nick,mail,link</span> <span class="hljs-comment"># custom comment header</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># pagination size</span><br></code></pre></td></tr></table></figure>
<h4 id="阅读数统计"><a href="#阅读数统计" class="headerlink" title="阅读数统计"></a>阅读数统计</h4><p>不蒜子统计<br>编辑 主题配置文件 中的busuanzi_count的配置项。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
